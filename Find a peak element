Can we find a peak element in worst time complexity better than O(n)?
We can use Divide and Conquer to find a peak in O(Logn) time. The idea is Binary Search based, we compare middle element with its neighbors. If middle element is not smaller than any of its neighbors, then we return it. If the middle element is smaller than the its left neighbor, then there is always a peak in left half (Why? take few examples). If the middle element is smaller than the its right neighbor, then there is always a peak in right half (due to same reason as left half). Following are C and Java implementations of this approach.
filter_none
edit
play_arrow

brightness_4
// A C++ program to find a peak element 
// using divide and conquer  
#include <bits/stdc++.h> 
using namespace std;  
  
// A binary search based function 
// that returns index of a peak element  
int findPeakUtil(int arr[], int low,  
                 int high, int n)  
{  
    // Find index of middle element  
    int mid = low + (high - low)/2; /* (low + high)/2 */
  
    // Compare middle element with its  
    // neighbours (if neighbours exist)  
    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&  
        (mid == n - 1 || arr[mid + 1] <= arr[mid]))  
        return mid;  
  
    // If middle element is not peak and its  
    // left neighbour is greater than it, 
    // then left half must have a peak element  
    else if (mid > 0 && arr[mid - 1] > arr[mid])  
        return findPeakUtil(arr, low, (mid - 1), n);  
  
    // If middle element is not peak and its  
    // right neighbour is greater than it,  
    // then right half must have a peak element  
    else return findPeakUtil(arr, (mid + 1), high, n);  
}  
  
// A wrapper over recursive function findPeakUtil()  
int findPeak(int arr[], int n)  
{  
    return findPeakUtil(arr, 0, n - 1, n);  
}  
  
// Driver Code 
int main()  
{  
    int arr[] = {1, 3, 20, 4, 1, 0};  
    int n = sizeof(arr) / sizeof(arr[0]);  
    cout << "Index of a peak point is " 
         << findPeak(arr, n);  
    return 0;  
}  
  
// This code is contributed by rathbhupendra 

Output :
Index of a peak point is 2
Time Complexity: O(Logn) where n is number of elements in array
